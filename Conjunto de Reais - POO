#include <iostream>
#include <vector>

using namespace std;

class TConjunto {
private:
    vector<double> elementos;
public:
    // Construtor
    TConjunto() {
        elementos = vector<double>(0);
    }

    // MÃ©todos
    void inserir(double elemento) {
        if (elementos.size() >= 100) {
            cout << "Erro: conjunto cheio!" << endl;
            return;
        }
        for (int i = 0; i < elementos.size(); i++) {
            if (elementos[i] == elemento) {
                return;
            }
        }
        elementos.push_back(elemento);
    }

    void remover(double elemento) {
        for (int i = 0; i < elementos.size(); i++) {
            if (elementos[i] == elemento) {
                elementos.erase(elementos.begin() + i);
                return;
            }
        }
    }

    bool pertence(double elemento) {
        for (int i = 0; i < elementos.size(); i++) {
            if (elementos[i] == elemento) {
                return true;
            }
        }
        return false;
    }

    bool estacontido(TConjunto conjunto) {
        for (int i = 0; i < elementos.size(); i++) {
            if (!conjunto.pertence(elementos[i])) {
                return false;
            }
        }
        return true;
    }

    void uniao(TConjunto conjunto1, TConjunto conjunto2) {
        for (int i = 0; i < conjunto1.elementos.size(); i++) {
            inserir(conjunto1.elementos[i]);
        }
        for (int i = 0; i < conjunto2.elementos.size(); i++) {
            inserir(conjunto2.elementos[i]);
        }
    }

    void intersecao(TConjunto conjunto1, TConjunto conjunto2) {
        for (int i = 0; i < conjunto1.elementos.size(); i++) {
            if (conjunto2.pertence(conjunto1.elementos[i])) {
                inserir(conjunto1.elementos[i]);
            }
        }
    }

    void subtracao(TConjunto conjunto1, TConjunto conjunto2) {
        for (int i = 0; i < conjunto1.elementos.size(); i++) {
            if (!conjunto2.pertence(conjunto1.elementos[i])) {
                inserir(conjunto1.elementos[i]);
            }
        }
    }

    bool contem(TConjunto conjunto) {
        return conjunto.estacontido(*this);
    }

    void mostrar() {
        for (int i = 0; i < elementos.size(); i++) {
            cout << elementos[i];
            if (i < elementos.size() - 1) {
                cout << " ";
            }
        }
        cout << endl;
    }

    void ler() {
        int n;
        double x;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> x;
            inserir(x);
        }
    }
};

 int main()
    {
        TConjunto a,b,c,d,e;
        int x;
        a.ler();
        b.ler();
        c.uniao(a,b);
        cout << "a UNIAO b = ";
        c.mostrar();
        d.intersecao(a,b);
        cout << "a INTERSECAO b = ";
        d.mostrar();
        cout << "d esta contido em a: " << (d.estacontido(a)?"sim":"nao") << endl;
        cout << "a contem d: " << (a.contem(d)?"sim":"nao") << endl;
        cout << "c esta contido em a: " << (c.estacontido(a)?"sim":"nao") << endl;
        cout << "c contem a: " << (c.contem(a)?"sim":"nao") << endl;
        cout << "c contem b: " << (c.contem(b)?"sim":"nao") << endl;
        cout << "a contem b: " << (a.contem(b)?"sim":"nao") << endl;
        cout << "a esta contido em b: " << (a.estacontido(b)?"sim":"nao") << endl;
        cout << "a - b = ";
        e.subtracao(a,b);
        e.mostrar();
        cin >> x;
        while (x>0){
            cout << x << " pertence ao conjunto A: " << (a.pertence(x)?"sim":"nao") << endl;
            cin >> x;
        }
        return 0;
    }
